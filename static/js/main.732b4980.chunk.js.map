{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAiCeA,MA7Bf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJY,mBACpBC,EADoB,KACdC,EADc,KAqB3B,OACI,uBAAMC,UAAU,YAAYC,SAXhC,SAAsBC,GAClBA,EAAEC,iBAECL,EAAKF,KAAKQ,QACTX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBAG3BN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,OAIzB,UACI,cAACU,EAAA,EAAD,CAAWC,MAAM,OAAOC,KAAK,OAAOC,KAAK,OAAOC,MAAOZ,EAAKF,KAAMe,SAhB1E,SAA+BT,GAC3BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAgB9B,cAACG,EAAA,EAAD,CAAQJ,KAAK,SAAb,sB,8DCIGK,MA5Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAUpC,OACE,eAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,QAA5B,UACE,cAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAVvC,WACEP,EAAejB,EAAKH,OAUlB,cAAC4B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgB3B,EAAKD,UAAY,eAAiB,MAHtD,SAMGC,EAAKF,OAER,cAAC8B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWlB,EAAKH,KAcd,SACE,cAAC,IAAD,UCROgC,MAdf,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACzC,OACE,cAACa,EAAA,EAAD,UACGD,EAAME,KAAI,SAAChC,GAAD,OACT,cAAC,EAAD,CACAA,KAAMA,EACNiB,eAAgBA,EAChBC,WAAYA,GAHDlB,EAAKH,UCFlBoC,EAAoB,wBAiDXC,MA/Cf,WAAgB,IAAD,EAEatC,mBAAS,IAFtB,mBAENkC,EAFM,KAECK,EAFD,KAsCb,OAlCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IAClDI,GACDF,EAASE,KAEV,IAGHD,qBAAU,WACRI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MACtD,CAACA,IAyBF,sBAAK5B,UAAU,MAAf,UACI,cAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAKlB,QAAQ,KAA3C,kCACA,cAAC,EAAD,CAAU/B,QAzBhB,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QAyBf,cAAC,EAAD,CAAUA,MAAOA,EAAOb,eAtB9B,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAGA,EAAKH,KAAOA,EACN,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAaiDkB,WAR9D,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,aC/B/BiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.732b4980.chunk.js","sourcesContent":["import { Button, TextField} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleTaskInputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if(todo.task.trim()) {\r\n            addTodo({ ...todo, id: uuidv4() });\r\n        }\r\n\r\n        setTodo({ ...todo, task: \"\" }); // Reset input\r\n    }\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <TextField label=\"Task\" name=\"task\" type=\"text\" value={todo.task} onChange={handleTaskInputChange}/>\r\n            <Button type=\"submit\">Save</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from \"react\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null,\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import { List } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\r\n  return (\r\n    <List>\r\n      {todos.map((todo) => (\r\n        <Todo key={todo.id} \r\n        todo={todo} \r\n        toggleComplete={toggleComplete}\r\n        removeTodo={removeTodo}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nfunction App() {\r\n\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n    if(storageTodos) {\r\n      setTodos(storageTodos);\r\n    }\r\n  }, []);\r\n\r\n  // Local Storage\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addTodo(todo) {\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(id) {\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if(todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <Typography style={{ padding: 16}} variant=\"h3\">Todo List with React</Typography>\r\n        <TodoForm addTodo={addTodo}/>\r\n        <TodoList todos={todos} toggleComplete={toggleComplete} removeTodo={removeTodo}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}